# Generated by Django 5.1.5 on 2025-01-21 20:54

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BattleLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "battle_id",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for the battle",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "type",
                    models.CharField(help_text="Type of the battle", max_length=50),
                ),
                (
                    "timestamp",
                    models.DateTimeField(help_text="Timestamp of the battle"),
                ),
                (
                    "arena",
                    models.CharField(
                        default="Unknown Arena",
                        help_text="Arena where the battle took place",
                        max_length=100,
                    ),
                ),
                (
                    "game_mode",
                    models.CharField(
                        default="Unknown Mode",
                        help_text="Game mode used in the battle",
                        max_length=100,
                    ),
                ),
                (
                    "player_tag",
                    models.CharField(
                        db_index=True,
                        help_text="Player's unique identifier (tag)",
                        max_length=255,
                    ),
                ),
                (
                    "player_name",
                    models.CharField(
                        help_text="Player's name in the battle", max_length=255
                    ),
                ),
                (
                    "starting_trophies",
                    models.IntegerField(
                        default=0, help_text="Starting trophies before the battle"
                    ),
                ),
                (
                    "trophy_change",
                    models.IntegerField(
                        default=0, help_text="Change in trophies after the battle"
                    ),
                ),
                (
                    "crowns",
                    models.IntegerField(default=0, help_text="Number of crowns earned"),
                ),
                (
                    "king_tower_hp",
                    models.IntegerField(
                        default=0, help_text="Remaining HP of the king's tower"
                    ),
                ),
                (
                    "princess_tower_hp",
                    models.JSONField(
                        blank=True,
                        help_text="Remaining HP of the princess towers (as JSON)",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Battle Log",
                "verbose_name_plural": "Battle Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Clan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for the clan",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the clan", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the clan", null=True
                    ),
                ),
                (
                    "badge_id",
                    models.PositiveIntegerField(
                        help_text="Badge ID associated with the clan"
                    ),
                ),
                (
                    "clan_score",
                    models.PositiveIntegerField(help_text="Score of the clan"),
                ),
                (
                    "members_count",
                    models.PositiveIntegerField(
                        help_text="Number of members in the clan"
                    ),
                ),
            ],
            options={
                "verbose_name": "Clan",
                "verbose_name_plural": "Clans",
            },
        ),
        migrations.CreateModel(
            name="GameMode",
            fields=[
                (
                    "id",
                    models.CharField(
                        help_text="Unique identifier for the game mode",
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the game mode", max_length=100),
                ),
            ],
            options={
                "verbose_name": "Game Mode",
                "verbose_name_plural": "Game Modes",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for the player",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Player's in-game name", max_length=100),
                ),
                (
                    "level",
                    models.PositiveIntegerField(help_text="Player's experience level"),
                ),
                (
                    "trophies",
                    models.PositiveIntegerField(
                        help_text="Number of trophies the player has"
                    ),
                ),
            ],
            options={
                "verbose_name": "Player",
                "verbose_name_plural": "Players",
            },
        ),
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.CharField(
                        help_text="Unique identifier for the challenge",
                        max_length=50,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="Name of the challenge", max_length=100),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the challenge", null=True
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        blank=True, help_text="Start time of the challenge", null=True
                    ),
                ),
                (
                    "end_time",
                    models.DateTimeField(
                        blank=True, help_text="End time of the challenge", null=True
                    ),
                ),
                (
                    "win_mode",
                    models.CharField(
                        blank=True,
                        help_text="Win condition of the challenge",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "casual",
                    models.BooleanField(
                        default=False, help_text="Indicates if the challenge is casual"
                    ),
                ),
                (
                    "max_losses",
                    models.PositiveIntegerField(
                        help_text="Maximum losses allowed in the challenge"
                    ),
                ),
                (
                    "max_wins",
                    models.PositiveIntegerField(
                        help_text="Maximum wins allowed in the challenge"
                    ),
                ),
                (
                    "icon_url",
                    models.URLField(
                        blank=True, help_text="URL of the challenge icon", null=True
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Parent challenge if nested",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_challenges",
                        to="clashroyale.challenge",
                    ),
                ),
                (
                    "game_mode",
                    models.ForeignKey(
                        help_text="Associated game mode for the challenge",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="challenges",
                        to="clashroyale.gamemode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Challenge",
                "verbose_name_plural": "Challenges",
                "ordering": ["-start_time"],
            },
        ),
        migrations.CreateModel(
            name="Prize",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        blank=True,
                        help_text="Type of prize (e.g., consumable)",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(
                        blank=True, help_text="Amount of the prize", null=True
                    ),
                ),
                (
                    "consumable_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the consumable prize",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        help_text="Associated challenge for the prize",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prizes",
                        to="clashroyale.challenge",
                    ),
                ),
            ],
            options={
                "verbose_name": "Prize",
                "verbose_name_plural": "Prizes",
            },
        ),
    ]
